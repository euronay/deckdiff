@page "/deck/{DeckId}"
@inject ILogger<DeckView> logger
@inject ScryfallApiClient scryfallApi
@inject LocalStorage storage

@if(Deck == null)
{
    <h1>Deck builder</h1>
}
else
{
    <h1><input type="text" bind="@Deck.Name" /></h1>
    <div class="row">
        <div class="col">
            <h5><i class="ms ms-creature" />Creatures</h5>
            <div class="deck">
                @foreach (var card in Deck.Main.OrderBy(c => c.Name).Where(c => c.TypeLine.Contains("Creature")))
                {
                    <br /><img class="card-image" src='@card.ImageUris["small"]'/>
                }
            </div>
        </div>
        <div class="col">
            <h5><i class="ms ms-planeswalker" />Planeswalkers</h5>
            <div class="deck">
                @foreach (var card in Deck.Main.OrderBy(c => c.Name).Where(c => c.TypeLine.Contains("Planeswalker")))
                {
                    <br /><img class="card-image" src='@card.ImageUris["small"]'/>
                }
            </div>
        </div>
        <div class="col">
            <h5><i class="ms ms-instant" />Instants</h5>
            <div class="deck">
                @foreach (var card in Deck.Main.OrderBy(c => c.Name).Where(c => c.TypeLine.Contains("Instant")))
                {
                    <br /><img class="card-image" src='@card.ImageUris["small"]'/>
                }
            </div>
        </div>
        <div class="col">
            <h5><i class="ms ms-sorcery" />Sorceries</h5>
            <div class="deck">
                @foreach (var card in Deck.Main.OrderBy(c => c.Name).Where(c => c.TypeLine.Contains("Sorcery")))
                {
                    <br /><img class="card-image" src='@card.ImageUris["small"]'/>
                }
            </div>
        </div>
        <div class="col">
            <h5><i class="ms ms-artifact" />Artifacts</h5>
            <div class="deck">
                @foreach (var card in Deck.Main.OrderBy(c => c.Name).Where(c => c.TypeLine.Contains("Artifact") && !c.TypeLine.Contains("Creature")))
                {
                    <br /><img class="card-image" src='@card.ImageUris["small"]'/>
                }
            </div>
        </div>
        <div class="col">
            <h5><i class="ms ms-enchantment" />Enchantments</h5>
            <div class="deck">
                @foreach (var card in Deck.Main.OrderBy(c => c.Name).Where(c => c.TypeLine.Contains("Enchantment") && !c.TypeLine.Contains("Creature")))
                {
                    <br /><img class="card-image" src='@card.ImageUris["small"]'/>
                }
            </div>
        </div>
        <div class="col">
            <h5><i class="ms ms-land" />Lands</h5>
            <div class="deck">
                @foreach (var card in Deck.Main.OrderBy(c => c.Name).Where(c => c.TypeLine.Contains("Land") && !c.TypeLine.Contains("Creature")))
                {
                    <br /><img class="card-image" src='@card.ImageUris["small"]'/>
                }
            </div>
        </div>
    </div>
    <button class="btn btn-primary" onclick=@Save>Save</button>
}
<div class="row">
    <div class="col">
          <div class="card bg-light">
                <div class="card-body">
                    <CardSearch AddCard=@Choose />
                </div>
          </div>       
    </div>
</div>


@functions {

    [Parameter]
    private string DeckId { get; set; }

    private Deck Deck { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogDebug($"Deck ID: {DeckId}");
        if(string.IsNullOrEmpty(DeckId))
        {
            return;
        }
        logger.LogDebug("Loading from storage");
        var deckData = await storage.GetItem<string>(DeckId);
        if(string.IsNullOrEmpty(deckData))
        {
            logger.LogDebug("Not found in storage");
            Deck = new Deck()
            {
                Id = DeckId
            };
        }
        else
        {
            logger.LogDebug(deckData);
            Deck = JsonConvert.DeserializeObject<Deck>(deckData);
        }


        StateHasChanged();
    }

    private async void Save()
    {
        await storage.SetItem<string>(DeckId, JsonConvert.SerializeObject(Deck));
    }

    private void Choose(Card card, int count)
    {
        Deck.Main.AddRange(Enumerable.Range(0, count).Select(c => card));
        StateHasChanged();
    }
}