@page "/deck/{DeckId}"
@inject ILogger<DeckView> logger
@inject ScryfallApiClient scryfallApi
@inject LocalStorage storage


<h1>Deck builder</h1>
@if(_deck != null)
{
    @foreach (var cardEntry in _deck.Main)
    {
        <p>@cardEntry.Count  @cardEntry.Card.Name</p>
        <img src='@cardEntry.Card.ImageUris["small"]'/><br />
    }

    <button class="btn btn-primary" onclick=@Save>Save</button>
}


<h2>Search</h2>
@if(_searchResults != null)
{
    <table>
        <thead>
            <td></td>
            <td>Name</td>
            <td></td>
        </thead>
        @foreach(var card in _searchResults)
        {
            <tr>
                <td><img src='@card.ImageUris["small"]' /></td>
                <td>@card.Name</td>
                <td>
                    <button class="btn btn-primary" onclick="@(() => Choose(card))">Select</button>
                </td>
            </tr>

        }
</table>
}


<p>
    <input type="text" bind="@_searchQuery" />
    <button class="btn btn-primary" onclick="@Search">Search</button>
</p>

@functions {

    [Parameter]
    private string DeckId { get; set; }

    private deckdiff.Model.Deck _deck { get; set; }
    private string _searchQuery {get; set; } 
    private IEnumerable<Card> _searchResults {get; set;}

    protected override async Task OnParametersSetAsync()
    {
        logger.LogDebug($"Deck ID: {DeckId}");
        if(string.IsNullOrEmpty(DeckId))
        {
            return;
        }
        logger.LogDebug("Loading from storage");
        var deckData = await storage.GetItem<string>(DeckId);
        if(string.IsNullOrEmpty(deckData))
        {
            logger.LogDebug("Not found in storage");
            _deck = new Deck()
            {
                Id = DeckId
            };
        }
        else
        {
            logger.LogDebug(deckData);
            _deck = JsonConvert.DeserializeObject<Deck>(deckData);
        }


        StateHasChanged();
    } 

    private async void Save()
    {
        await storage.SetItem<string>(DeckId, JsonConvert.SerializeObject(_deck));
    }

    private async void Search()
    {
        //CurrentCard = null;
        _searchResults = null;

        var options = new SearchOptions
        {
            Sort = SearchOptions.CardSort.Cmc,
            Direction = SearchOptions.SortDirection.Desc,
            Mode = SearchOptions.RollupMode.Prints
        };

        var results = await scryfallApi.Cards.Search(_searchQuery, 1, options);
        logger.LogDebug($"Results count {results?.Data.Count()}");
        //CurrentCard = results?.Data.First();
        _searchResults = results?.Data;

        //https://github.com/aspnet/Blazor/issues/402
        StateHasChanged();
    }

    private void Choose(Card card)
    {
        _deck.Main.Add(new CardInfo(){
            Count = 1, 
            Card = card
            });
        StateHasChanged();
    }
}