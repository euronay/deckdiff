@page "/deck/{DeckId}"
@inject ILogger<DeckView> logger
@inject ScryfallApiClient scryfallApi
@inject LocalStorage storage

@if(Deck == null)
{
    <h1>Deck builder</h1>
}
else
{
    <h1>@Deck.Id</h1>
    <div class="row">
        <div class="col">
            
                <div class="deck">
                    @foreach (var cardEntry in Deck.Main)
                    {
                        <br /><img class="card-image" src='@cardEntry.Card.ImageUris["normal"]'/>
                    }
                </div>

                <button class="btn btn-primary" onclick=@Save>Save</button>
        </div>
    </div>
}
<div class="row">
    <div class="col">
          <div class="card bg-light">
                <div class="card-body">
                    <CardSearch AddCard=@Choose />
                </div>
          </div>       
    </div>
</div>


@functions {

    [Parameter]
    private string DeckId { get; set; }

    private Deck Deck { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogDebug($"Deck ID: {DeckId}");
        if(string.IsNullOrEmpty(DeckId))
        {
            return;
        }
        logger.LogDebug("Loading from storage");
        var deckData = await storage.GetItem<string>(DeckId);
        if(string.IsNullOrEmpty(deckData))
        {
            logger.LogDebug("Not found in storage");
            Deck = new Deck()
            {
                Id = DeckId
            };
        }
        else
        {
            logger.LogDebug(deckData);
            Deck = JsonConvert.DeserializeObject<Deck>(deckData);
        }


        StateHasChanged();
    } 

    private async void Save()
    {
        await storage.SetItem<string>(DeckId, JsonConvert.SerializeObject(Deck));
    }

    private void Choose(Card card)
    {
        Deck.Main.Add(new CardInfo(){
            Count = 1, 
            Card = card
            });
        StateHasChanged();
    }
}