@inject ILogger<CardSearch> logger
@inject ScryfallApiClient scryfallApi

<div class="row">
    <div class="col-md-4">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Search for card" bind="@SearchQuery" />
            <div class="input-group-append">
                <button class="btn btn-outline-primary" type="button" onclick=@Search>Search</button>
            </div>
        </div>

        @if(SearchResults != null)
        {
            <table class="table table-hover">
                <tbody>
                    @foreach(var card in SearchResults)
                    {
                        <tr>
                            <td><a class="searchresult-row" onclick="@(() => Select(card))">@card.Name</a></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-md-8">
        @if(SelectedCard != null)
        {
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-12">
                            <h2>@SelectedCard.Name</h2>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-auto">
                            <img class="card-image" src='@SelectedCard.ImageUris["small"]'/><br />
                        </div>
                        <div class="col-md-6">
                            
                                <label for="printingSelect">Set</label>
                                <div class="input-group">
                                    <select class="custom-select" id="printingSelect"></select>
                                </div>

                                <div class="input-group">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" value="" id="foilCheck">
                                        <label class="form-check-label" for="foilCheck">Foil</label>
                                    </div>
                                </div>

                                <label for="numberInput">Number</label>
                                <div class="input-group">
                                    <!-- TODO Componetise this -->
                                    <div class="input-group-prepend">
                                        <button class="btn btn-outline-secondary" onclick=@(() => SelectedCardCount--)>
                                            <span class="oi oi-minus"></span>
                                        </button>
                                    </div>
                                    <input type="text" class="form-control" id="numberInput" bind=@SelectedCardCount />
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-secondary" onclick=@(() => SelectedCardCount++)>
                                            <span class="oi oi-plus"></span>
                                        </button>
                                    </div>
                                </div>
                                    
                                <button type="button" class="btn btn-primary" onclick=@(() => AddCard(SelectedCard))>Add</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>





@functions {

    private string SearchQuery {get; set; } 
    private int _selectedCardCount = 1;
    private int SelectedCardCount 
    {
        get => _selectedCardCount;
        set
        {
            _selectedCardCount = (value < 1) ? 1 : value;
            StateHasChanged();
        }
    }  
    private IEnumerable<Card> SearchResults {get; set;}
    public Card SelectedCard { get; set; }

    [Parameter]
    internal Action<Card> AddCard {get; set;}

    private async void Search()
    {
        SelectedCard = null;
        SearchResults = null;

        if(String.IsNullOrEmpty(SearchQuery))
        {
            StateHasChanged();
            return;
        }

        var options = new SearchOptions
        {
            Sort = SearchOptions.CardSort.Cmc,
            Direction = SearchOptions.SortDirection.Desc
        };

        var results = await scryfallApi.Cards.Search(SearchQuery, 1, options);
        logger.LogDebug($"Results count {results?.Data.Count()}");
        //CurrentCard = results?.Data.First();
        SearchResults = results?.Data;

        StateHasChanged();
    }

    private void Select(Card card)
    {
        SelectedCard = card;
        StateHasChanged();
    }

}